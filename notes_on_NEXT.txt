Next is a react front end development web framework created by Vercel that enables functionality such as server side rendering 
and static site generation


Server side rendering- 
entire application rendered on client by java script. The request gets redirected through a single html file then 
java script gets loaded and displayed in browser. Faster application then php interface where server compiles the
data and uses template engine and formats a html page with content

React- just client side rendering:
APP built with clinet side framework
-can be good
-not going to see any contenet in Create-react app
-would need to create another server side 



NextJS -first page load is rendered server side rahter than client side. Content delivered directly.
Search engine crawlers can view it directly.

-BENEFITS:
EAsy page routing
API routes (in file structure) 
Out of the box typeScripts and SASS
typescript- similar to javascript 
SASS- change css extension to .sass
Static site generation - similar to GASTBY 
-static websites can run without needing a server 
Easy development- can host a nextjs on any hosting service that use NOde js
Host a nextJS application on any service that can hose a nodeJS 
Own easy to use push service that you can push to where you can store your object
Export as static- can be used anywhere including CDN

Create next app -to generate a project 



WE CAN LINK PAGES 
USE PROPS
USE NAVBAR
Create about page
create components folder 
create functionality 
-state managment
-bootstrap 
-json server API
-bootstrap 
-how to use bootstrap?
-one option is install it in npm
or if you want you can add this link 

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css" 
rel="stylesheet" integrity="sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6" 
crossorigin="anonymous">

in your document file

-pages directory
we have _app
everything starts under _app.js

create a document.js file and will hold full document


getInitialProps enables server-side rendering in a page and allows you to do initial data population, 
it means sending the page with the data already populated from the server. This is especially useful for SEO.

getInitialProps is an async function that can be added to any page as a static method. 

function Page({ stars }) {
  return <div>Next stars: {stars}</div>
}

Page.getInitialProps = async (ctx) => {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const json = await res.json()
  return { stars: json.stargazers_count }
}

export default Page


OR 

import React from 'react'

class Page extends React.Component {
  static async getInitialProps(ctx) {
    const res = await fetch('https://api.github.com/repos/vercel/next.js')
    const json = await res.json()
    return { stars: json.stargazers_count }
  }

  render() {
    return <div>Next stars: {this.props.stars}</div>
  }
}

export default Page



Context Object
getInitialProps receives a single argument called context, it's an object with the following properties:

pathname - Current route. That is the path of the page in /pages
query - Query string section of URL parsed as an object
asPath - String of the actual path (including the query) shown in the browser
req - HTTP request object (server only)
res - HTTP response object (server only)
err - Error object if any error is encountered during the rendering


BOOTSTRAP DOESNT DO ANY LOGIC :  ONLY STYLING



https://nextjs.org/docs/basic-features/data-fetching#getserversideprops-server-side-rendering


getServerSideProps (Server-side Rendering)
Version History
If you export an async function called getServerSideProps from a page, Next.js will pre-render this page on each request using the data returned by getServerSideProps.

export async function getServerSideProps(context) {
  return {
    props: {}, // will be passed to the page component as props
  }
}
The context parameter is an object containing the following keys:

params: If this page uses a dynamic route, params contains the route parameters. If the page name is [id].js , then params will look like { id: ... }. To learn more, take a look at the Dynamic Routing documentation.
req: The HTTP IncomingMessage object.
res: The HTTP response object.
query: An object representing the query string.
preview: preview is true if the page is in the preview mode and false otherwise. See the Preview Mode documentation.
previewData: The preview data set by setPreviewData. See the Preview Mode documentation.
resolvedUrl: A normalized version of the request URL that strips the _next/data prefix for client transitions and includes original query values.
locale contains the active locale (if enabled).
locales contains all supported locales (if enabled).
defaultLocale contains the configured default locale (if enabled).
getServerSideProps should return an object with:

props - A required object with the props that will be received by the page component. It should be a serializable object

notFound - An optional boolean value to allow the page to return a 404 status and page. Below is an example of how it works:

export async function getServerSideProps(context) {
  const res = await fetch(`https://...`)
  const data = await res.json()

  if (!data) {
    return {
      notFound: true,
    }
  }

  return {
    props: {}, // will be passed to the page component as props
  }
}
redirect - An optional redirect value to allow redirecting to internal and external resources. It should match the shape of { destination: string, permanent: boolean }. In some rare cases, you might need to assign a custom status code for older HTTP Clients to properly redirect. In these cases, you can use the statusCode property instead of the permanent property, but not both. Below is an example of how it works:

export async function getServerSideProps(context) {
  const res = await fetch(`https://.../data`)
  const data = await res.json()

  if (!data) {
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    }
  }

  return {
    props: {}, // will be passed to the page component as props
  }
}
Note: You can import modules in top-level scope for use in getServerSideProps. Imports used in getServerSideProps will not be bundled for the client-side.

This means you can write server-side code directly in getServerSideProps. This includes reading from the filesystem or a database.

Note: You should not use fetch() to call an API route in getServerSideProps. Instead, directly import the logic used inside your API route. 
You may need to slightly refactor your code for this approach.

Fetching from an external API is fine!

Simple example
Here’s an example which uses getServerSideProps to fetch data at request time and pre-renders it. This example is also in the Pages documentation.

function Page({ data }) {
  // Render data...
}

// This gets called on every request
export async function getServerSideProps() {
  // Fetch data from external API
  const res = await fetch(`https://.../data`)
  const data = await res.json()

  // Pass data to the page via props
  return { props: { data } }
}

export default Page
When should I use getServerSideProps?
You should use getServerSideProps only if you need to pre-render a page whose data must be fetched at request time. Time to first byte (TTFB) will be slower than getStaticProps because the server
must compute the result on every request, and the result cannot be cached by a CDN without extra configuration.

If you don’t need to pre-render the data, then you should consider fetching data on the client side. Click here to learn more.




Next.js is my preferred framework for developing React-based web applications, and I’m using it for API Routes to implement a REST API. 
The REST API needs to store and retrieve data and that’s why it needs a database whatever like PostgreSQL, MySQL, Oracle, and MongoDB database, 
but need to mention here the MongoDB with Node.js based project is easy & comfortable, you can find tons of examples over the Google but SQL?
 You may not find so many examples, so it is an article on how to connect to the database server with PostgreSQL. 
This article describes how I create and manage that database connection within the API routes.








https://techsolutionshere.com/next-js-with-postgresql/


https://techinplanet.com/access-data-in-next-js-from-postgresql-database/


https://nextjs.org/docs/advanced-features/custom-document


https://nextjs.org/docs/api-reference/data-fetching/getInitialProps


https://react-table.tanstack.com/docs/quick-start



Using the useTable hook
Now that you have some data and columns defined, we can pass those into the useTable hook to create a table instance.


https://gist.github.com/gnppro/a8d8f68c037aec5e63cc6e8d5d471557


Next, install the required packages.

npm i express pg
Express is a minimalist web framework you can use to write web applications on top of Node.js technology, while node-postgres(pg) is a client library that enables Node.js apps to communicate with PostgreSQL.

Once both are installed, create an index.js file with the following content.
















